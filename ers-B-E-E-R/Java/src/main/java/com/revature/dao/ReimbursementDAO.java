package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Timestamp;
import java.util.List;
import java.util.Vector;

import com.revature.beans.Reimbursement;
import com.revature.beans.ReimbursementStatus;
import com.revature.interfaces.DAO;
import com.revature.util.ConnectionUtil;

public class ReimbursementDAO implements DAO<Reimbursement> {

	/************************************************************************************
	 * Constructors
	 ************************************************************************************/
	/**
	 * Create new ReimbursementDAO
	 */
	public ReimbursementDAO() {
		super();
	}

	/************************************************************************************
	 * Create
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to insert a
	 * new Reimbursement to the ers_reimbursements table
	 * 
	 * @param Reimbursement
	 *            newReimbursement
	 */
	@Override
	public int create(Reimbursement newReimbursement) {
		log.trace("Method called to insert a new Reimbursement: " + newReimbursement);
		log.trace("Attempting to get connection to  ERS database");

		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("INSERT INTO ers_reimbursement" + " (reimb_amount"
					+ ", reimb_submitted" + ", reimb_description" + ", reimb_author" + ", reimb_status_id"
					+ ", reimb_type_id)" + " VALUES (?, ?, ?, ?, ?, ?)", new String[] { "reimb_id" });
			log.trace("Retrieve reimbursement name from the new reimbursement and inserting it into the SQL query");
			prepedStatement.setFloat(1, newReimbursement.getAmount());
			prepedStatement.setTimestamp(2, Timestamp.valueOf(newReimbursement.getSubmitted()));
			prepedStatement.setString(3, newReimbursement.getDescription());
			prepedStatement.setInt(4, newReimbursement.getAuthorId());
			prepedStatement.setInt(5, 1);
			prepedStatement.setInt(6, newReimbursement.getTypeId());

			log.trace("Executing SQL query and retrieving the number of new rows inserted"
					+ "into ERS database's reimbursement table");
			int numRowsInserted = 0;
			try {
				numRowsInserted = prepedStatement.executeUpdate();
			} catch (SQLIntegrityConstraintViolationException e) {
				log.warn("Failed to insert new reimbursement - Reimbursement was not unique, printing stack trace");
				e.printStackTrace();
			} catch (SQLException e) {
				log.warn("Failed to insert new reimbursement - SQLException caught, printing stack trace");
				e.printStackTrace();
			}

			log.debug("SQL query inserted " + numRowsInserted + " rows into the ERS database's reimbursement table");

			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.getGeneratedKeys();

			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Setting the new reimbursement's ID to the ID generated by the ERS database");
				newReimbursement.setId(resultSet.getInt(1));
				log.trace("Returning the reimbursement role ID generated by the ERS database");
				return resultSet.getInt(1);
			}
		} catch (SQLException e) {
			log.warn("Failed to insert new reimbursement - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning 0");
		return 0;
	}

	/************************************************************************************
	 * Retrieve
	 ************************************************************************************/
	@Override
	public Reimbursement get(int id) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM ers_reimbursement WHERE reimb_id = ?");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				Reimbursement newReimb = new Reimbursement(rs.getInt("reimb_id"), rs.getFloat("reimb_amount"),
						rs.getTimestamp("reimb_submitted").toLocalDateTime(),
						rs.getTimestamp("reimb_resolved").toLocalDateTime(), rs.getString("reimb_description"),
						rs.getInt("reimb_author"), rs.getInt("reimb_resolver"), rs.getInt("reimb_status_id"),
						rs.getInt("reimb_type_id"));
				return newReimb;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Reimbursement get(Reimbursement reimb) {
		return null;
	}

	public List<Reimbursement> getAll(int userId) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT " + "reimb_id, " + "reimb_amount, "
					+ "reimb_description, " + "reimb_type_id, " + "reimb_submitted, " + "reimb_resolved, "
					+ "reimb_author, " + "reimb_resolver, " + "reimb_status_id  " + "FROM ers_reimbursement "
					+ "INNER JOIN ERS_USERS ON ers_users.ers_user_id = ers_reimbursement.reimb_author "
					+ "WHERE reimb_author = ?", new String[] { "ers_reimbursement_id" });

			prepedStatement.setInt(1, userId);

			log.trace("Executing SQL query and retrieving the number of new rows retrieved"
					+ "from the ERS database's reimbursement table");
			int numRowsRetrieved = 0;
			try {
				numRowsRetrieved = prepedStatement.executeUpdate();
			} catch (SQLIntegrityConstraintViolationException e) {
				log.warn("Failed to retrieve any reimbursements - printing stack trace");
				e.printStackTrace();
			} catch (SQLException e) {
				log.warn("Failed to retrieve any reimbursements - printing stack trace");
				e.printStackTrace();
			}

			log.debug("SQL query retrieved " + numRowsRetrieved + " rows from the ERS database's reimbursement table");

			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.executeQuery();

			log.trace("Checking if result set has an entry");
			List<Reimbursement> reimbList = new Vector<Reimbursement>();
			while (resultSet.next()) {
				if (resultSet.getTimestamp("reimb_resolved") == null) {
					Reimbursement newReimb = new Reimbursement(resultSet.getInt("reimb_id"),
							resultSet.getFloat("reimb_amount"), resultSet.getString("reimb_description"),
							resultSet.getInt("reimb_type_id"),
							resultSet.getTimestamp("reimb_submitted").toLocalDateTime(),
							resultSet.getInt("reimb_author"), resultSet.getInt("reimb_status_id"));
					reimbList.add(newReimb);
				} else {
					log.trace("ResId: " + resultSet.getInt("reimb_resolver"));
					Reimbursement newReimb = new Reimbursement(
							resultSet.getInt("reimb_id"),
							resultSet.getFloat("reimb_amount"),
							resultSet.getTimestamp("reimb_submitted").toLocalDateTime(),
							resultSet.getTimestamp("reimb_resolved").toLocalDateTime(),
							resultSet.getString("reimb_description"),
							resultSet.getInt("reimb_author"),
							resultSet.getInt("reimb_resolver"),
							resultSet.getInt("reimb_status_id"),
							resultSet.getInt("reimb_type_id"));
					reimbList.add(newReimb);
					log.trace("New Reimb Res Id: " + newReimb.getResovlerId());
				}
			}
			return reimbList;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	public List<Reimbursement> getAll() {
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT " + "reimb_id, " + "reimb_amount, "
					+ "reimb_description, " + "reimb_type_id, " + "reimb_submitted, " + "reimb_resolved, "
					+ "reimb_author, " + "reimb_resolver, " + "reimb_status_id  " + "FROM ers_reimbursement "
					+ "INNER JOIN ERS_USERS ON ers_users.ers_user_id = ers_reimbursement.reimb_author "
					, new String[] { "ers_reimbursement_id" });

			log.trace("Executing SQL query and retrieving the number of new rows retrieved"
					+ "from the ERS database's reimbursement table");
			int numRowsRetrieved = 0;
			try {
				numRowsRetrieved = prepedStatement.executeUpdate();
			} catch (SQLIntegrityConstraintViolationException e) {
				log.warn("Failed to retrieve any reimbursements - printing stack trace");
				e.printStackTrace();
			} catch (SQLException e) {
				log.warn("Failed to retrieve any reimbursements - printing stack trace");
				e.printStackTrace();
			}

			log.debug("SQL query retrieved " + numRowsRetrieved + " rows from the ERS database's reimbursement table");

			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.executeQuery();

			log.trace("Checking if result set has an entry");
			List<Reimbursement> reimbList = new Vector<Reimbursement>();
			while (resultSet.next()) {
				if (resultSet.getTimestamp("reimb_resolved") == null) {
					Reimbursement newReimb = new Reimbursement(resultSet.getInt("reimb_id"),
							resultSet.getFloat("reimb_amount"), resultSet.getString("reimb_description"),
							resultSet.getInt("reimb_type_id"),
							resultSet.getTimestamp("reimb_submitted").toLocalDateTime(),
							resultSet.getInt("reimb_author"), resultSet.getInt("reimb_status_id"));
					reimbList.add(newReimb);
				} else {
					log.trace("ResId: " + resultSet.getInt("reimb_resolver"));
					Reimbursement newReimb = new Reimbursement(
							resultSet.getInt("reimb_id"),
							resultSet.getFloat("reimb_amount"),
							resultSet.getTimestamp("reimb_submitted").toLocalDateTime(),
							resultSet.getTimestamp("reimb_resolved").toLocalDateTime(),
							resultSet.getString("reimb_description"),
							resultSet.getInt("reimb_author"),
							resultSet.getInt("reimb_resolver"),
							resultSet.getInt("reimb_status_id"),
							resultSet.getInt("reimb_type_id"));
					reimbList.add(newReimb);
					log.trace("New Reimb Res Id: " + newReimb.getResovlerId());
				}
			}
			return reimbList;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}

	@Override
	public void update(Reimbursement reimb) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("UPDATE ers_reimbursement" + " SET reimb_status_id = ?, "
					+ "reimb_resolved = ?, " + "reimb_resolver = ? " + "WHERE reimb_id = ?");
			ps.setInt(1, reimb.getStatusId());
			ps.setTimestamp(2, Timestamp.valueOf(reimb.getResolved()));
			ps.setInt(3, reimb.getResovlerId());
			ps.setInt(4, reimb.getId());
			int numRowsUpdated = ps.executeUpdate();
			log.debug("SQL query updated " + numRowsUpdated + " rows in the Bank database's user table");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void delete(Reimbursement arg0) {
		// TODO Auto-generated method stub

	}

}
