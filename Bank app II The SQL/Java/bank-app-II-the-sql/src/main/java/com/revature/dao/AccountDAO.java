package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.revature.beans.Account;
import com.revature.interfaces.MultiResultDAO;
import com.revature.util.singleton.jdbc.ConnectionUtil;

/**
 * DAO for accounts in banking application
 * 
 * @author Bobby McGetrick
 *
 */
public class AccountDAO implements MultiResultDAO<Account> {
	
	/************************************************************************************
	 * Private fields
	 ************************************************************************************/
	private int userId;
	
	/************************************************************************************
	 * Constructors
	 ************************************************************************************/
	/**
	 * Create new AccountDAO
	 */
	public AccountDAO() {
		super();
		log.trace("Constructing new AccountDAO");
		log.trace("Called super constructor - Object");
		log.trace("New AccountDAO created");
	}	
	
	/**
	 * Create new AccountDAO
	 */
	public AccountDAO(int userId) {
		super();
		log.trace("Constructing new AccountDAO");
		log.trace("Called super constructor - Object");
		log.trace("Setting user id to " + userId);
		this.userId = userId;
		log.trace("New AccountDAO created");
	}	
	
	/************************************************************************************
	 * hasCode() and equals()
	 ************************************************************************************/
	/**
	 * Generate AccoutnDAO hash code
	 */
	@Override
	public int hashCode() {
		log.trace("Genrating AccountDAO hash code");
		final int prime = 31;
		int result = 1;
		result = prime * result + userId;
		log.trace("Returning AccoutnDAO hash code");
		return result;
	}

	/**
	 * Check if AccountDAO is equivalent to another Object
	 * 
	 * @param Object obj
	 */
	@Override
	public boolean equals(Object obj) {
		log.trace("Checking if BalanceScreen is equivalent to the passed Object " + obj );
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AccountDAO other = (AccountDAO) obj;
		if (userId != other.userId)
			return false;
		return true;
	}
	
	/************************************************************************************
	 * Getters and Setters
	 ************************************************************************************/
	/**
	 * Retrieve AccountDAO.userId
	 * @return int userId
	 */
	public int getUserId() {
		return userId;
	}

	/**
	 * Setting AccountDAO.userId to a given integer
	 * @param int userId
	 */
	public void setUserId(int userId) {
		this.userId = userId;
	}

	/************************************************************************************
	 * Create
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * insert a new Account to the accounts table
	 * 
	 * @param Account newAccount
	 * 
	 * @return int
	 */
	@Override
	public int create(Account newAccount) {
		log.trace("Method called to insert a new Account: " + newAccount);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			log.debug(newAccount.getAccountNameId());
			PreparedStatement prepedStatement = conn.prepareStatement("INSERT INTO accounts "
					+ "(balance, account_name_id) VALUES (?,?)",
					new String[] { "account_id" });
			
			log.trace("Retrieve balance from the new account and inserting it into the SQL query");
			prepedStatement.setFloat(1, newAccount.getBalance());
			log.trace("Retrieve account name id from the new account and inserting it into the SQL query");
			prepedStatement.setInt(2, newAccount.getAccountNameId());
			
			log.trace("Executing SQL query and retrieving the number of new rows inserted"
					+ "into Bank database's user table");
			int numRowsInserted = prepedStatement.executeUpdate();
			log.debug("SQL query inserted " + numRowsInserted + " rows into the Bank database's user table");
			
			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.getGeneratedKeys();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Setting the new account's account ID to the account ID"
						+ "generated by the Bank database");
				newAccount.setId(resultSet.getInt(1));
				log.trace("Returning the account ID generated by the Bank database");
				return resultSet.getInt(1);
			}
		} catch (SQLException e) {
			log.warn("Failed to insert new account - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning 0");
		return 0;
	}

	/************************************************************************************
	 * Retrieve
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * retrieve an Account to the accounts table using the account id
	 * 
	 * @param int id
	 * 
	 * @return Account
	 */
	@Override
	public Account get(int id) {
		log.trace("Method called to select a User with id: " + id);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT * FROM accounts "
					+ "WHERE account_id = ?");
			
			log.trace("Insertinting accountId " + id + " into the SQL query");
			prepedStatement.setInt(1, id);
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new Account with data from the result set");
				Account newAccount = new Account(resultSet.getInt("account_id"), resultSet.getInt("account_name_id"), resultSet.getFloat("balance"));
				log.trace("Returning Account with account id: " + id);
				return newAccount;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve account - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * retrieve an Account to the accounts table using the account name
	 * 
	 * @param String account_name
	 * 
	 * @return Account
	 */
	@Override
	public Account get(String accountName) {
		log.trace("Method called to select an Account with name: " + accountName);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT accnts.account_id, accnts.account_name_id, balance FROM account_names "
					+ "INNER JOIN accounts accnts ON (account_id = accnts.account_id) "
					+ "INNER JOIN user_to_account u2a ON (accnts.account_id = u2a.account_id) "
					+ "WHERE account_name = ? AND user_id = ?");
			
			log.trace("Insertinting accountId " + accountName + " and userId " + userId + " into the SQL query");
			prepedStatement.setString(1, accountName);
			prepedStatement.setInt(2, userId);
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new Account with data from the result set");
				Account newAccount = new Account(resultSet.getInt("account_id"), resultSet.getInt("account_name_id"), resultSet.getFloat("balance"));
				log.trace("Returning Account with account name: " + accountName);
				return newAccount;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve account - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * retrieve all Accounts that belong to a given user id
	 * 
	 * @param int userId
	 * 
	 * @return List<Account>
	 */
	@Override
	public List<Account> getAllByUserId(int userId) {
		log.trace("Method called to select all Accounts related to user id: " + userId);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT accnts.account_id, accnts.account_name_id, balance FROM account_names "
					+ "INNER JOIN accounts accnts ON (account_id = accnts.account_id) "
					+ "INNER JOIN user_to_account u2a ON (accnts.account_id = u2a.account_id) "
					+ "WHERE user_id = ?  GROUP BY accnts.account_id, accnts.account_name_id, balance ORDER BY account_id");
			
			log.trace("Insertinting accountId " + userId + " into the SQL query");
			prepedStatement.setInt(1, userId);
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
			
			log.trace("Creating a List of Accounts");
			List<Account> accountList = new ArrayList<Account>();
			
			log.trace("Checking if result set has an entry");
			while (resultSet.next()) {
				log.trace("Creating a new Account with data from the result set");
				Account newAccount = new Account(resultSet.getInt("account_id"), resultSet.getInt("account_name_id"), resultSet.getFloat("balance"));
				accountList.add(newAccount);
			}
			
			log.trace("Returning List of accounts accountList");
			return accountList;
			
		} catch (SQLException e) {
			log.warn("Failed to retrieve accounts - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	/**
	 * Retrieving by account Id would only yeild a single account
	 * 
	 * Calls get() which returns a List of Accounts with a single elements
	 * 
	 * @return List<Account>
	 */
	@Override
	public List<Account> getAllByAccountId(int accountId) {
		log.trace("Creating new List of Accounts");
		List<Account> accountList = new ArrayList<Account>();
		accountList.add(get(accountId));
		return accountList;
	}

	/************************************************************************************
	 * Update
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * update an Acount in the accounts table
	 * 
	 * @param Acount account
	 */
	@Override
	public void update(Account account) {
		log.trace("Method called to update an Account: " + account);
		log.trace("Attempting to get connection to Bank database");	
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("UPDATE accounts "
					+ "SET account_name_id = " + account.getAccountNameId()
					+ ", balance = " + account.getBalance()
					+ "WHERE account_id = " + account.getId());
			
			log.trace("Executing SQL query and retrieving the number of new rows updated"
					+ "into Bank database's accounts table");
			int numRowsUpdated = prepedStatement.executeUpdate();
			log.debug("SQL query updated " + numRowsUpdated + " rows in the Bank database's user table");
		} catch (SQLException e) {
			log.warn("Failed to update account - SQLException caught, printing stack trace");
			e.printStackTrace();
		}		
	}

	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * delete an Account to the accounts table
	 * 
	 * @param Account account
	 */
	@Override
	public void delete(Account account) {
		log.trace("Method called to delete a Account: " + account);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("DELETE FROM accounts "
					+ "WHERE account_id = " + account.getId());
			
			log.trace("Executing SQL query and retrieving the number of new rows deleted"
					+ "into Bank database's user table");
			int numRowsDeleted = prepedStatement.executeUpdate();
			log.debug("SQL query inerted " + numRowsDeleted + " rows from the Bank database's user table");
		} catch (SQLException e) {
			log.warn("Failed to delete account - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}

}
