package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.List;
import java.util.Vector;

import com.revature.beans.ReimbursementType;
import com.revature.interfaces.DAO;
import com.revature.util.ConnectionUtil;

/**
 * DAO for reimbursement types in Employee Reimbursement System
 * 
 * @author Bobby McGetrick
 *
 */
public class ReimbursementTypeDAO implements DAO<ReimbursementType> {

	/************************************************************************************
	 * Constructors
	 ************************************************************************************/
	/**
	 * Create new ReimbursementTypeDAO
	 */
	public ReimbursementTypeDAO() {
		super();
		log.trace("Constructing new ReimbursementTypeDAO");
		log.trace("Called super constructor - Object");
		log.trace("New ReimbursementTypeDAO created");
	}

	/************************************************************************************
	 * Create
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * insert a new ReimbursementType to the ers_reimbursement_type table
	 * 
	 * @param ReimbursementType newReimbursementType
	 */
	@Override
	public int create(ReimbursementType newReimbursementType) {
		log.trace("Method called to insert a new ReimbursementType: " + newReimbursementType);
		log.trace("Attempting to get connection to  ERS database");
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("INSERT INTO ers_reimbursement_type "
					+ "(reimb_status)"
					+ " VALUES (?)",
					new String[] { "reimb_type_id" });
			log.trace("Retrieve user name from the new user and inserting it into the SQL query");
			prepedStatement.setString(1, newReimbursementType.getType());
			
			log.trace("Executing SQL query and retrieving the number of new rows inserted"
					+ "into ERS database's reimbursement type table");
			int numRowsInserted = 0;
			try {
				numRowsInserted = prepedStatement.executeUpdate();
			} catch (SQLIntegrityConstraintViolationException e) {
				log.warn("Failed to insert new reimbursement type - ReimbursementType was not unique, printing stack trace");
			} catch (SQLException e) {
				log.warn("Failed to insert new reimbursement type - SQLException caught, printing stack trace");
				e.printStackTrace();
			}
			
			log.debug("SQL query inserted " + numRowsInserted + " rows into the ERS database's user table");
			
			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.getGeneratedKeys();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Setting the new user role's ID to the ID generated by the ERS database");
				newReimbursementType.setId(resultSet.getInt(1));
				log.trace("Returning the user ID generated by the ERS database");
				return resultSet.getInt(1);
			}
		} catch (SQLException e) {
			log.warn("Failed to insert new reimbursement type - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning 0");
		return 0;
	}

	/************************************************************************************
	 * Retrieve
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to retrieve
	 * a ReimbursementType from the ers_reimbursement_type table using the reimbursement
	 * type id
	 * 
	 * @param int id
	 *            
	 */
	@Override
	public ReimbursementType get(int id) {
		log.trace("Method called to select a ReimbursementType with id: " + id);
		log.trace("Attempting to get connection to ERS database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT "
					+ "reimb_type_id"
					+ ", reimb_type"
					+ " FROM ers_reimbursement_type WHERE reimb_type_id = ?");
			
			log.trace("Insertinting Id " + id + " into the SQL query");
			prepedStatement.setInt(1, id);
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
		
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new ReimbursementType with data from the result set");
				ReimbursementType newReimbursementType = new ReimbursementType(resultSet.getInt(
						"reimb_type_id")
						, resultSet.getString("user_role"));
				log.trace("Returning ReimbursementType wth id: " + id);
				return newReimbursementType;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve reimbursement type with id " + id + " - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	@Override
	public ReimbursementType get(ReimbursementType reimbT) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("SELECT reimb_type_id "
					+ "FROM ers_reimbursement_type "
					+ "WHERE reimb_type = ?");
			ps.setString(1, reimbT.getType());
			
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				ReimbursementType rt = new ReimbursementType(rs.getInt("reimb_type_id"), reimbT.getType());
				return rt;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public List<ReimbursementType> getAll() {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM ers_reimbursement_type");
			
			List<ReimbursementType> typeList = new Vector();
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				typeList.add(new ReimbursementType(rs.getInt("reimb_type_id"), rs.getString("reimb_type")));
			}
			rs.close();
			return typeList;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

//	@Override
//	public ReimbursementType get(String string) {
//		// TODO Auto-generated method stub
//		return null;
//	}

	/************************************************************************************
	 * Update
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to update a
	 * ReimbursementType in the ers_reimbursement_type table
	 * 
	 * @param ReimbursementType reimbursementType
	 *            
	 */
	@Override
	public void update(ReimbursementType reimbursementType) {
		log.trace("Method called to update a ReimbursementType: " + reimbursementType);
		log.trace("Attempting to get connection to ERS database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("UPDATE users "
					+ "SET user_role = " + reimbursementType.getType()
					+ " WHERE ers_user_id = " + reimbursementType.getId());

			log.trace("Executing SQL query and retrieving the number of new rows updated"
					+ "in the ERS database's reimbursement type table");
			int numRowsUpdated = prepedStatement.executeUpdate();
			log.debug("SQL query updated " + numRowsUpdated + " rows in the ERS database's reimbursement_type table");
		} catch (SQLException e) {
			log.warn("Failed to update reimbursement type - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}

	/************************************************************************************
	 * Delete
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to delete a
	 * ReimbursementType to the ers_reimbursement_type table
	 * 
	 * @param ReimbursementType userRole
	 *            
	 */
	@Override
	public void delete(ReimbursementType reimbursementType) {
		log.trace("Method called to delete a ReimbursementType: " + reimbursementType);
		log.trace("Attempting to get connection to ERS database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("DELETE FROM ers_reimbursement_type"
					+ " WHERE reimb_type_id = " + reimbursementType.getId());

			log.trace("Executing SQL query and retrieving the number of new rows deleted"
					+ "into ERS database's reimbursement type table");
			int numRowsDeleted = prepedStatement.executeUpdate();
			log.debug("SQL query inerted " + numRowsDeleted + " rows from the ERS database's reimbursement type table");
		} catch (SQLException e) {
			log.warn("Failed to delete reimbursemtn type - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}

}
