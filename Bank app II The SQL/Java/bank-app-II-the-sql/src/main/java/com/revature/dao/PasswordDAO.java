package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;

import com.revature.beans.Password;
import com.revature.interfaces.DAO;
import com.revature.util.singleton.jdbc.ConnectionUtil;

/**
 * DAO for passwords in banking application
 * 
 * @author Bobby McGetrick
 *
 */
public class PasswordDAO implements DAO<Password> {
	
	/************************************************************************************
	 * Constructors
	 ************************************************************************************/
	/**
	 * Create new PasswordDAO
	 */
	public PasswordDAO() {
		super();
		log.trace("Constructing new PasswordDAO");
		log.trace("Called super constructor - Object");
		log.trace("New PasswordDAO created");
	}
	
	

	/************************************************************************************
	 * Create
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * insert a new Password to the passwords table
	 * 
	 * @param Password newPassword
	 */
	@Override
	public int create(Password newPassword) {
		log.trace("Method called to insert a new Password: " + newPassword);
		log.trace("Attempting to get connection to  Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("INSERT INTO passwords "
					+ "(pass_word) VALUES (?)",
					new String[] { "password_id" });
			
			log.trace("Retrieve password name from the new password and inserting it into the SQL query");
			prepedStatement.setString(1, newPassword.getPassword());
//			log.trace("Retrieve password from the new password and inserting it into the SQL query");
//			prepedStatement.setString(2, newPassword.getPassword());
			
			log.trace("Attempting to executing SQL query and retrieving the number of new rows inserted"
					+ "into Bank database's password table");
			int numRowsInserted = 0;
			try {
				log.trace("New password was unique, inserting it into the passwords table");
				numRowsInserted = prepedStatement.executeUpdate();
			} catch(SQLIntegrityConstraintViolationException e) {
				log.warn("New password was not unique, getting password Id of existing password that matches user input"
						+ "and returning it");
				return get(newPassword.getPassword()).getId();
			}
			log.debug("SQL query inserted " + numRowsInserted + " rows into the Bank database's passwords table");
			
			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.getGeneratedKeys();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Setting the new password's password ID to the password ID generated by the Bank database");
				newPassword.setId(resultSet.getInt(1));
				log.trace("Returning the password ID generated by the Bank database");
				return resultSet.getInt(1);
			}
		} catch (SQLException e) {
			log.warn("Failed to insert new password - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning 0");
		return 0;  
	}
	
	/************************************************************************************
	 * Retrieve
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * retrieve a Password from the passwords table using the password id
	 * 
	 * @param int id
	 */
	@Override
	public Password get(int id) {
		log.trace("Method called to select a Password with id: " + id);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT * FROM passwords "
					+ "WHERE password_id = ?");
			
			log.trace("Insertinting passwordId " + id + " into the SQL query");
			prepedStatement.setInt(1, id);
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new Password with data from the result set");
				Password newPassword = new Password(resultSet.getInt("password_id"), resultSet.getString("password"));
				log.trace("Returning Password wth password id: " + id);
				return newPassword;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve password - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * retrieve a Password from the passwords table using the password String
	 * 
	 * @param String password
	 */
	@Override
	public Password get(String password) {
		log.trace("Method called to select a Password with password: " + password);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT * FROM passwords "
					+ "WHERE pass_word = ?");
			
			log.trace("Insertinting passwordId " + password + " into the SQL query");
			prepedStatement.setString(1, password);
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new Password with data from the result set");
				Password newPassword = new Password(resultSet.getInt("password_id"), resultSet.getString("pass_word"));
				log.trace("Returning Password wth password: " + password);
				return newPassword;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve password - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	/************************************************************************************
	 * Update
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * update a Password in the passwords table
	 * 
	 * @param int id
	 */
	@Override
	public void update(Password password) {
		log.trace("Method called to update a Password: " + password);
		log.trace("Attempting to get connection to Bank database");	
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("UPDATE passwords "
					+ "SET password = '" + password.getPassword() + "'"
//					+ ", password = '" + password.getPassword() + "'"
					+ "WHERE password_id = " + password.getId());
			
			log.trace("Executing SQL query and retrieving the number of new rows updated"
					+ "into Bank database's passwords table");
			int numRowsUpdated = prepedStatement.executeUpdate();
			log.debug("SQL query updated " + numRowsUpdated + " rows in the Bank database's password table");
		} catch (SQLException e) {
			log.warn("Failed to update password - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}
	
	/************************************************************************************
	 * Delete
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * delete a Password to the passwords table
	 * 
	 * @param Password password
	 */
	@Override
	public void delete(Password password) {
		log.trace("Method called to delete a Password: " + password);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("DELETE FROM passwords "
					+ "WHERE password_id = " + password.getId());
			
			log.trace("Executing SQL query and retrieving the number of new rows deleted"
					+ "into Bank database's password table");
			int numRowsDeleted = prepedStatement.executeUpdate();
			log.debug("SQL query inerted " + numRowsDeleted + " rows from the Bank database's password table");
		} catch (SQLException e) {
			log.warn("Failed to delete password - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}

}
