package com.revature.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.List;
import java.util.Vector;

import com.revature.beans.User;
import com.revature.interfaces.DAO;
import com.revature.util.ConnectionUtil;

/**
 * DAO for users in Employee Reimbursement System
 * 
 * @author Bobby McGetrick
 *
 */
public class UserDAO implements DAO<User> {
	
	/************************************************************************************
	 * Constructors
	 ************************************************************************************/
	/**
	 * Create new UserDAO
	 */
	public UserDAO() {
		super();
		log.trace("Constructing new UserDAO");
		log.trace("Called super constructor - Object");
		log.trace("New UserDAO created");
	}

	/************************************************************************************
	 * Create
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * insert a new User to the ers_users table
	 * 
	 * @param User newUser
	 */
	@Override
	public int create(User newUser) {
		log.trace("Method called to insert a new User: " + newUser);
		log.trace("Attempting to get connection to  ERS database");
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("INSERT INTO ers_users "
					+ "(ers_username"
					+ ", ers_password"
					+ ", user_first_name"
					+ ", user_last_name"
					+ ", user_email"
					+ ", user_role_id"
					+ " VALUES (?, ?, ?, ?, ?, ?)",
					new String[] { "ers_user_id" });
			log.trace("Retrieve user name from the new user and inserting it into the SQL query");
			prepedStatement.setString(1, newUser.getUsername());
			prepedStatement.setString(2, newUser.getPassword());
			prepedStatement.setString(3, newUser.getFirstName());
			prepedStatement.setString(4, newUser.getLastName());
			prepedStatement.setString(5, newUser.getEmail());
			prepedStatement.setInt(6, newUser.getRoleId());
			
			log.trace("Executing SQL query and retrieving the number of new rows inserted"
					+ "into ERS database's user table");
			int numRowsInserted = 0;
			try {
				numRowsInserted = prepedStatement.executeUpdate();
			} catch (SQLIntegrityConstraintViolationException e) {
				log.warn("Failed to insert new user - User was not unique, printing stack trace");
				e.printStackTrace();
			} catch (SQLException e) {
				log.warn("Failed to insert new user - SQLException caught, printing stack trace");
				e.printStackTrace();
			}
			
			log.debug("SQL query inserted " + numRowsInserted + " rows into the ERS database's user table");
			
			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.getGeneratedKeys();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Setting the new user's ID to the ID generated by the ERS database");
				newUser.setId(resultSet.getInt(1));
				log.trace("Returning the user role ID generated by the ERS database");
				return resultSet.getInt(1);
			}
		} catch (SQLException e) {
			log.warn("Failed to insert new user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning 0");
		return 0;
	}

	/************************************************************************************
	 * Retrieve
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to retrieve
	 * a User from the ers_users table using the user id
	 * 
	 * @param int id
	 *            
	 */
	@Override
	public User get(int id) {
		log.trace("Method called to select a User with id: " + id);
		log.trace("Attempting to get connection to ERS database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT "
					+ "ers_user_id"
					+ ", ers_username"
					+ ", user_first_name"
					+ ", user_last_name"
					+ ", user_email"
					+ ", user_role_id"
					+ " FROM ers_users WHERE ers_user_id = ?");
			
			log.trace("Insertinting userId " + id + " into the SQL query");
			prepedStatement.setInt(1, id);
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
		
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new User with data from the result set");
				User newUser = new User(resultSet.getInt("ers_user_id")
						, resultSet.getString("ers_username")
						, resultSet.getString("user_first_name")
						, resultSet.getString("user_last_name")
						, resultSet.getString("user_email")
						, resultSet.getInt("user_role_id"));
				log.trace("Returning User wth user id: " + id);
				return newUser;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve user with id " + id + " - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}

	@Override
	public User get(User user) {
		log.trace("Method called to select a User with username: " + user.getUsername() + " and the given password");
		log.trace("Attempting to get connection to ERS database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT "
					+ "ers_user_id"
					+ ", user_first_name"
					+ ", user_last_name"
					+ ", user_email"
					+ ", user_role_id"
					+ " FROM ers_users WHERE ers_username = ? AND ers_password = ?");
			
			log.trace("Insertinting username " + user.getUsername() + " into the SQL query");
			prepedStatement.setString(1, user.getUsername());
			log.trace("Insertinting submitted password into the SQL query");
			prepedStatement.setString(2, user.getPassword());
			
			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();
		
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new User with data from the result set");
				User newUser = new User(resultSet.getInt("ers_user_id")
						, user.getUsername()
						, resultSet.getString("user_first_name")
						, resultSet.getString("user_last_name")
						, resultSet.getString("user_email")
						, resultSet.getInt("user_role_id"));
				log.trace("Returning User wth user id: " + resultSet.getInt("ers_user_id"));
				return newUser;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve user with username " + user.getUsername() + " and password " + user.getPassword() + " - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}
	
	public List<User> getAllIdsAndNames() {
		try (Connection conn = ConnectionUtil.getConnection()) {
			PreparedStatement ps = conn.prepareStatement("SELECT (ers_user_id, user_first_name, user_last_name) FROM ers_users");
			ResultSet resultSet = ps.executeQuery();
			List<User> userList = new Vector();
			while (resultSet.next()) {
				userList.add(new User(resultSet.getInt("ers_user_id")
						, resultSet.getString("user_first_name")
						, resultSet.getString("user_last_name")));
			}
			return userList;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	/************************************************************************************
	 * Update
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to update a
	 * User in the ers_users table
	 * 
	 * @param User user
	 *            
	 */
	@Override
	public void update(User user) {
		log.trace("Method called to update a User: " + user);
		log.trace("Attempting to get connection to ERS database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("UPDATE users "
					+ "SET ers_username = " + user.getUsername()
					+ ", ers_password = " + user.getPassword()
					+ ", user_fist_name = " + user.getFirstName()
					+ ", user_last_name = " + user.getLastName()
					+ ", user_email	= " + user.getEmail()
					+ ", user_role_id = " + user.getRoleId()
					+ " WHERE ers_user_id = " + user.getId());

			log.trace("Executing SQL query and retrieving the number of new rows updated"
					+ "in the ERS database's users table");
			int numRowsUpdated = prepedStatement.executeUpdate();
			log.debug("SQL query updated " + numRowsUpdated + " rows in the ERS database's user table");
		} catch (SQLException e) {
			log.warn("Failed to update user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}

	/************************************************************************************
	 * Delete
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the ERS database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to delete a
	 * User to the ers_users table
	 * 
	 * @param User user
	 *            
	 */
	@Override
	public void delete(User user) {
		log.trace("Method called to delete a User: " + user);
		log.trace("Attempting to get connection to ERS database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("DELETE FROM ers_users"
					+ " WHERE ers_user_id = " + user.getId());

			log.trace("Executing SQL query and retrieving the number of new rows deleted"
					+ "into ERS database's users table");
			int numRowsDeleted = prepedStatement.executeUpdate();
			log.debug("SQL query inerted " + numRowsDeleted + " rows from the ERS database's users table");
		} catch (SQLException e) {
			log.warn("Failed to delete user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}
	
}
