package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;

import com.revature.beans.User;
import com.revature.interfaces.DAO;
import com.revature.screens.OpenScreen;
import com.revature.util.singleton.jdbc.ConnectionUtil;

/**
 * DAO for users in banking application
 * 
 * @author Bobby McGetrick
 *
 */
public class UserDAO implements DAO<User> {
	
	/************************************************************************************
	 * Constructors
	 ************************************************************************************/
	/**
	 * Create new UserDAO
	 */
	public UserDAO() {
		super();
		log.trace("Constructing new UserDAO");
		log.trace("Called super constructor - Object");
		log.trace("New UserDAO created");
	}

	/************************************************************************************
	 * Create
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * insert a new User to the users table
	 * 
	 * @param User newUser
	 */
	@Override
	public int create(User newUser) {
		log.trace("Method called to insert a new User: " + newUser);
		log.trace("Attempting to get connection to  Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("INSERT INTO users "
					+ "(user_name, password_id) VALUES (?,?)",
					new String[] { "user_id" });
			
			log.trace("Retrieve user name from the new user and inserting it into the SQL query");
			prepedStatement.setString(1, newUser.getUserName());
			prepedStatement.setInt(2, newUser.getPasswordId());
			
			log.trace("Executing SQL query and retrieving the number of new rows inserted"
					+ "into Bank database's user table");
			int numRowsInserted = 0;
			try {
				numRowsInserted = prepedStatement.executeUpdate();
			} catch (SQLIntegrityConstraintViolationException e) {
				log.warn("User name was not unique, returning to OpenScreen");
				System.out.println("That user name is already taken, please try again.");
				//Screen screen = new OpenScreen();
				new OpenScreen();
			}
			log.debug("SQL query inserted " + numRowsInserted + " rows into the Bank database's user table");
			
			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.getGeneratedKeys();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Setting the new user's user ID to the user ID generated by the Bank database");
				newUser.setId(resultSet.getInt(1));
				log.trace("Returning the user ID generated by the Bank database");
				return resultSet.getInt(1);
			}
		} catch (SQLException e) {
			log.warn("Failed to insert new user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning 0");
		return 0;  
	}

	/************************************************************************************
	 * Retrieve
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to retrieve
	 * a User from the users table using the user id
	 * 
	 * @param int
	 *            id
	 */
	@Override
	public User get(int id) {
		log.trace("Method called to select a User with id: " + id);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT * FROM users " + "WHERE user_id = ?");

			log.trace("Insertinting userId " + id + " into the SQL query");
			prepedStatement.setInt(1, id);

			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();

			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new User with data from the result set");
				User newUser = new User(resultSet.getInt("user_id"), resultSet.getInt("password_id"),
						resultSet.getString("user_name"), new ArrayList<Integer>());
				log.trace("Returning User wth user id: " + id);
				return newUser;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}

	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to retrieve
	 * a User from the users table using the user name
	 * 
	 * @param String
	 *            userName
	 */
	@Override
	public User get(String userName) {
		log.trace("Method called to select a User with user name: " + userName);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("SELECT * FROM users WHERE user_name = ?");

			log.trace("Insertinting userName " + userName + " into the SQL query");
			prepedStatement.setString(1, userName);

			log.trace("Executing SQL query and retrieving its resul set");
			ResultSet resultSet = prepedStatement.executeQuery();

			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Creating a new User with data from the result set");
				User newUser = new User(resultSet.getInt("user_id"), resultSet.getInt("password_id"),
						resultSet.getString("user_name"), new ArrayList<Integer>());
				log.trace("Returning User wth user name: " + userName);
				return newUser;
			}
		} catch (SQLException e) {
			log.warn("Failed to retrieve user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning null");
		return null;
	}

	/************************************************************************************
	 * Update
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to update a
	 * User in the users table
	 * 
	 * @param int
	 *            id
	 */
	@Override
	public void update(User user) {
		log.trace("Method called to update a User: " + user);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn
					.prepareStatement("UPDATE users " + "SET user_name = '" + user.getUserName() + "'"
							+ "WHERE user_id = " + user.getId());

			log.trace("Executing SQL query and retrieving the number of new rows updated"
					+ "into Bank database's users table");
			int numRowsUpdated = prepedStatement.executeUpdate();
			log.debug("SQL query updated " + numRowsUpdated + " rows in the Bank database's user table");
		} catch (SQLException e) {
			log.warn("Failed to update user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}

	/************************************************************************************
	 * Delete
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil If
	 * connection is successful then build and send an Oracle SQL query to delete a
	 * User to the users table
	 * 
	 * @param User
	 *            user
	 */
	@Override
	public void delete(User user) {
		log.trace("Method called to delete a User: " + user);
		log.trace("Attempting to get connection to Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn
					.prepareStatement("DELETE FROM users " + "WHERE user_id = " + user.getId());

			log.trace("Executing SQL query and retrieving the number of new rows deleted"
					+ "into Bank database's user table");
			int numRowsDeleted = prepedStatement.executeUpdate();
			log.debug("SQL query inerted " + numRowsDeleted + " rows from the Bank database's user table");
		} catch (SQLException e) {
			log.warn("Failed to delete user - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
	}

}
