

/*******************************************************************************
   Drop database if it exists
********************************************************************************/
DROP USER revaturebank CASCADE;

/*******************************************************************************
   Create database
********************************************************************************/
CREATE USER revaturebank
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to revaturebank;
GRANT resource to revaturebank;
GRANT create session TO revaturebank;
GRANT create table TO revaturebank;
GRANT create view TO revaturebank;



conn revaturebank/p4ssw0rd


/*******************************************************************************
   Create Tables
********************************************************************************/
CREATE TABLE bank_users
(
    user_id NUMBER NOT NULL,
    username VARCHAR2(500) NOT NULL,
    pass VARCHAR2(500) NOT NULL,
    CONSTRAINT bank_users_pk PRIMARY KEY (user_id)

);

CREATE TABLE accounts
(
    account_id NUMBER NOT NULL,
    user_id NUMBER,
    account_name VARCHAR2(20) NOT NULL,
    account_type VARCHAR2(50), 
    balance NUMBER,
    FOREIGN KEY (user_id) REFERENCES bank_users (user_id) ON DELETE CASCADE,
    CONSTRAINT account_id_pk PRIMARY KEY (account_id)
    
);
CREATE TABLE transactions
(   
    transaction_id NUMBER,
    user_id NUMBER,
    trans varchar2(500),
    CONSTRAINT transaction_id_pk PRIMARY KEY (transaction_id)
);

/*******************************************************************************
   Sequences
********************************************************************************/
CREATE SEQUENCE user_id_seq START WITH 1;

CREATE SEQUENCE transaction_id_seq START WITH 1;

CREATE SEQUENCE account_id_seq START WITH 1;
/*******************************************************************************
   Triggers
********************************************************************************/

CREATE OR REPLACE TRIGGER transaction_id_trigger
BEFORE INSERT OR UPDATE on transactions
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        SELECT transaction_id_seq.nextVal INTO :new.transaction_id FROM dual;
    ELSIF UPDATING THEN
        SELECT :old.transaction_id INTO :new.transaction_id FROM dual;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER user_id_trigger
BEFORE INSERT OR UPDATE on bank_users
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        SELECT user_id_seq.nextVal INTO :new.user_id FROM dual;
    ELSIF UPDATING THEN
        SELECT :old.user_id INTO :new.user_id FROM dual;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER account_id_trigger
BEFORE INSERT OR UPDATE on accounts
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        SELECT account_id_seq.nextVal INTO :new.account_id FROM dual;
    ELSIF UPDATING THEN
        SELECT :old.account_id INTO :new.account_id FROM dual;
    END IF;
END;
/

/*******************************************************************************
   Procedures
********************************************************************************/

CREATE OR REPLACE PROCEDURE create_account_for_user
(a_id IN number,
u_id IN number,
a_name IN number,
a_type IN number)
IS 
BEGIN
    INSERT INTO accounts (account_id, user_id, account_name, account_type) 
        VALUES (a_id, u_id, a_name, a_type);
    
END create_account_for_user;
/
commit;
exit;