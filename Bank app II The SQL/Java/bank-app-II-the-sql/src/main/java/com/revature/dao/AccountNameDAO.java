package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.revature.beans.AccountName;
import com.revature.interfaces.DAO;
import com.revature.util.singleton.jdbc.ConnectionUtil;
/**
 * DAO for account names in banking application
 * 
 * @author Bobby McGetrick
 *
 */
public class AccountNameDAO implements DAO<AccountName> {
	
	/************************************************************************************
	 * Constructors
	 ************************************************************************************/
	/**
	 * Create new AccountNameDAO
	 */
	public AccountNameDAO() {
		super();
		log.trace("Constructing new AccountNameDAO");
		log.trace("Called super constructor - Object");
		log.trace("New AccountNameDAO created");
	}
	
	/************************************************************************************
	 * Create
	 ************************************************************************************/
	/**
	 * Try to establish a connection to the Bank database using ConnectionUtil
	 * If connection is successful then build and send an Oracle SQL query to 
	 * insert a new AccountName to the acount_names table
	 * 
	 * @param AccounName newAccountName
	 */
	@Override
	public int create(AccountName newAccountName) {
		log.trace("Method called to insert a new AccountName: " + newAccountName);
		log.trace("Attempting to get connection to  Bank database");
		try (Connection conn = ConnectionUtil.getConnection()) {
			log.trace("Connection established with database, creating prepared statement");
			PreparedStatement prepedStatement = conn.prepareStatement("INSERT INTO account_names "
					+ "(account_name) VALUES (?)",
					new String[] { "account_name_id" });
			
			log.trace("Retrieve password name from the new password and inserting it into the SQL query");
			prepedStatement.setString(1, newAccountName.getAccountName());
						
			log.trace("Attempting to executing SQL query and retrieving the number of new rows inserted"
					+ "into Bank database's account_names table");
			int numRowsInserted = 0;

			if (get(newAccountName.getAccountName()) != null) {
				log.trace("Account name is as ready in the data base, reutnring the id associated with that account name");
				return get(newAccountName.getAccountName()).getId();
			}
				
			log.trace("New account name was unique, inserting it into the account_names table");
			numRowsInserted = prepedStatement.executeUpdate();
				
			log.debug("SQL query inserted " + numRowsInserted + " rows into the Bank database's account_names table");
			
			log.trace("Retrieving the result set of the SQL query");
			ResultSet resultSet = prepedStatement.getGeneratedKeys();
			
			log.trace("Checking if result set has an entry");
			if (resultSet.next()) {
				log.trace("Setting the new account name's account name ID to the account name ID"
						+ " generated by the Bank database");
				newAccountName.setId(resultSet.getInt(1));
				log.trace("Returning the account name ID generated by the Bank database");
				return resultSet.getInt(1);
			}
		} catch (SQLException e) {
			log.warn("Failed to insert new account name - SQLException caught, printing stack trace");
			e.printStackTrace();
		}
		log.trace("Returning 0");
		return 0;  
	}
		
		/************************************************************************************
		 * Retrieve
		 ************************************************************************************/
		/**
		 * Try to establish a connection to the Bank database using ConnectionUtil
		 * If connection is successful then build and send an Oracle SQL query to 
		 * retrieve a AccountName from the account_names table using the account name id
		 * 
		 * @param int id
		 */
		@Override
		public AccountName get(int id) {
			log.trace("Method called to select a AccountName with id: " + id);
			log.trace("Attempting to get connection to Bank database");
			try (Connection conn = ConnectionUtil.getConnection()) {
				log.trace("Connection established with database, creating prepared statement");
				PreparedStatement prepedStatement = conn.prepareStatement("SELECT * FROM account_names "
						+ "WHERE account_name_id = ?");
				
				log.trace("Insertinting accountNameId " + id + " into the SQL query");
				prepedStatement.setInt(1, id);
				
				log.trace("Executing SQL query and retrieving its resul set");
				ResultSet resultSet = prepedStatement.executeQuery();
				
				log.trace("Checking if result set has an entry");
				if (resultSet.next()) {
					log.trace("Creating a new AccountName with data from the result set");
					AccountName newAccountName = new AccountName(resultSet.getInt("account_name_id"), resultSet.getString("account_name"));
					log.trace("Returning AccountName wthaccount name id: " + id);
					return newAccountName;
				}
			} catch (SQLException e) {
				log.warn("Failed to retrieve acount name - SQLException caught, printing stack trace");
				e.printStackTrace();
			}
			log.trace("Returning null");
			return null;
		}
		
		/**
		 * Try to establish a connection to the Bank database using ConnectionUtil
		 * If connection is successful then build and send an Oracle SQL query to 
		 * retrieve a AccountName from the account_namess table using the account_name String
		 * 
		 * @param String accountName
		 */
		@Override
		public AccountName get(String accountName) {
			log.trace("Method called to select a AccountName with account name: " + accountName);
			log.trace("Attempting to get connection to Bank database");
			try (Connection conn = ConnectionUtil.getConnection()) {
				log.trace("Connection established with database, creating prepared statement");
				PreparedStatement prepedStatement = conn.prepareStatement("SELECT * FROM account_names "
						+ "WHERE account_name = ?");
				
				log.trace("Insertinting acountNameId " + accountName + " into the SQL query");
				prepedStatement.setString(1, accountName);
				
				log.trace("Executing SQL query and retrieving its resul set");
				ResultSet resultSet = prepedStatement.executeQuery();
				
				log.trace("Checking if result set has an entry");
				if (resultSet.next()) {
					log.trace("Creating a new AccountName with data from the result set");
					AccountName newAccountName = new AccountName(resultSet.getInt("account_name_id"), resultSet.getString("account_name"));
					log.trace("Returning AccountName wth account name: " + accountName);
					return newAccountName;
				}
			} catch (SQLException e) {
				log.warn("Failed to retrieve account name - SQLException caught, printing stack trace");
				e.printStackTrace();
			}
			log.trace("Returning null");
			return null;
		}
		
		/************************************************************************************
		 * Update
		 ************************************************************************************/
		/**
		 * Try to establish a connection to the Bank database using ConnectionUtil
		 * If connection is successful then build and send an Oracle SQL query to 
		 * update a AccountName in the acount_names table
		 * 
		 * @param int id
		 */
		@Override
		public void update(AccountName accountName) {
			log.trace("Method called to update a AccountName: " + accountName);
			log.trace("Attempting to get connection to Bank database");	
			try (Connection conn = ConnectionUtil.getConnection()) {
				log.trace("Connection established with database, creating prepared statement");
				PreparedStatement prepedStatement = conn.prepareStatement("UPDATE account_names "
						+ "SET account_name = '" + accountName.getAccountName() + "'"
//						+ ", password = '" + password.getAccountName() + "'"
						+ "WHERE account_name_id = " + accountName.getId());
				
				log.trace("Executing SQL query and retrieving the number of new rows updated"
						+ "into Bank database's account_names table");
				int numRowsUpdated = prepedStatement.executeUpdate();
				log.debug("SQL query updated " + numRowsUpdated + " rows in the Bank database's account_names table");
			} catch (SQLException e) {
				log.warn("Failed to update account name - SQLException caught, printing stack trace");
				e.printStackTrace();
			}
		}
		
		/************************************************************************************
		 * Delete
		 ************************************************************************************/
		/**
		 * Try to establish a connection to the Bank database using ConnectionUtil
		 * If connection is successful then build and send an Oracle SQL query to 
		 * delete a AccountName to the account_names table
		 * 
		 * @param AccountName accountName
		 */
		@Override
		public void delete(AccountName acountName) {
			log.trace("Method called to delete a AccountName: " + acountName);
			log.trace("Attempting to get connection to Bank database");
			try (Connection conn = ConnectionUtil.getConnection()) {
				log.trace("Connection established with database, creating prepared statement");
				PreparedStatement prepedStatement = conn.prepareStatement("DELETE FROM account_names "
						+ "WHERE acount_name_id = " + acountName.getId());
				
				log.trace("Executing SQL query and retrieving the number of new rows deleted"
						+ "into Bank database's account_names table");
				int numRowsDeleted = prepedStatement.executeUpdate();
				log.debug("SQL query inerted " + numRowsDeleted + " rows from the Bank database's account_names table");
			} catch (SQLException e) {
				log.warn("Failed to delete account name - SQLException caught, printing stack trace");
				e.printStackTrace();
			}
		}

}
